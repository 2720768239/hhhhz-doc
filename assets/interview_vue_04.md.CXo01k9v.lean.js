import{_ as a,o as t,c as s,a2 as i}from"./chunks/framework.DVZE_dpK.js";const c=JSON.parse('{"title":"双向绑定的原理和使用","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/04.md","filePath":"interview/vue/04.md","lastUpdated":1727076453000}'),r={name:"interview/vue/04.md"};function n(l,e,h,o,p,d){return t(),s("div",null,e[0]||(e[0]=[i('<h1 id="双向绑定的原理和使用" tabindex="-1">双向绑定的原理和使用 <a class="header-anchor" href="#双向绑定的原理和使用" aria-label="Permalink to &quot;双向绑定的原理和使用&quot;">​</a></h1><h2 id="_1-双向绑定的原理" tabindex="-1">1.双向绑定的原理 <a class="header-anchor" href="#_1-双向绑定的原理" aria-label="Permalink to &quot;1.双向绑定的原理&quot;">​</a></h2><h3 id="_1-1-什么是双向绑定" tabindex="-1">1.1 什么是双向绑定 <a class="header-anchor" href="#_1-1-什么是双向绑定" aria-label="Permalink to &quot;1.1 什么是双向绑定&quot;">​</a></h3><p>双向绑定是指视图和数据之间的数据自动同步，当数据发生变化时，视图会自动更新；当视图发生变化时，数据也会自动更新。</p><p>Vue.js 的双向绑定是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h3 id="_1-2-实现原理" tabindex="-1">1.2 实现原理 <a class="header-anchor" href="#_1-2-实现原理" aria-label="Permalink to &quot;1.2 实现原理&quot;">​</a></h3><p>Vue.js 实现双向绑定的原理主要分为以下几个步骤：</p><ol><li><p><strong>数据劫持</strong>：通过 Object.defineProperty() 方法，对数据进行劫持，监听数据的变化。当数据发生变化时，会触发 setter 方法。</p></li><li><p><strong>发布者-订阅者模式</strong>：在 Vue.js 中，每个数据属性都有一个对应的发布者对象，当数据发生变化时，发布者会通知所有订阅了这个数据的订阅者，触发相应的监听回调。Vue.js 使用了一个全局的事件中心对象，用于管理所有的发布者和订阅者。</p></li><li><p><strong>视图更新</strong>：当数据发生变化时，会触发 setter 方法，然后通过发布者-订阅者模式，通知所有订阅了这个数据的订阅者，触发相应的监听回调。在监听回调中，会更新视图。</p></li></ol><h2 id="_2-双向绑定的使用" tabindex="-1">2.双向绑定的使用 <a class="header-anchor" href="#_2-双向绑定的使用" aria-label="Permalink to &quot;2.双向绑定的使用&quot;">​</a></h2><p>v-model</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',11)]))}const u=a(r,[["render",n]]);export{c as __pageData,u as default};
