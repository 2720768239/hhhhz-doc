import{_ as t,o as a,c as r,a2 as o}from"./chunks/framework.DVZE_dpK.js";const h=JSON.parse('{"title":"vue 模板渲染原理","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/06.md","filePath":"interview/vue/06.md","lastUpdated":1727076453000}'),n={name:"interview/vue/06.md"};function i(d,e,l,u,m,s){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="vue-模板渲染原理" tabindex="-1">vue 模板渲染原理 <a class="header-anchor" href="#vue-模板渲染原理" aria-label="Permalink to &quot;vue 模板渲染原理&quot;">​</a></h1><p>template -&gt; ast -&gt; render function -&gt; vdom -&gt; 真实 dom</p><h2 id="template-ast" tabindex="-1">template -&gt; ast <a class="header-anchor" href="#template-ast" aria-label="Permalink to &quot;template -&gt; ast&quot;">​</a></h2><ul><li>将 template 转换成 ast 树，这里使用了大量的正则表达式对模板进行解析</li><li>转换过程中，会根据模板语法生成对应的 ast 节点</li></ul><h2 id="ast-render-function" tabindex="-1">ast -&gt; render function <a class="header-anchor" href="#ast-render-function" aria-label="Permalink to &quot;ast -&gt; render function&quot;">​</a></h2><ul><li>通过递归的方式遍历整个 ast 树，生成对应的 render function 字符串</li></ul><h2 id="render-function-vdom" tabindex="-1">render function -&gt; vdom <a class="header-anchor" href="#render-function-vdom" aria-label="Permalink to &quot;render function -&gt; vdom&quot;">​</a></h2><ul><li>将 render function 转换成 vdom，vdom 是一个 JavaScript 对象，用来描述真实 dom 的结构</li></ul><h2 id="vdom-真实-dom" tabindex="-1">vdom -&gt; 真实 dom <a class="header-anchor" href="#vdom-真实-dom" aria-label="Permalink to &quot;vdom -&gt; 真实 dom&quot;">​</a></h2><ul><li>通过 vdom 和真实 dom 的 diff 算法，计算出最小的更新，然后更新到真实 dom 上</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>template -&gt; ast -&gt; render function -&gt; vdom -&gt; 真实 dom</li></ul>',12)]))}const f=t(n,[["render",i]]);export{h as __pageData,f as default};
